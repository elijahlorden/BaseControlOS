OS = {}
function OS.sleep(timeout)
	checkArg(1, timeout, "number", "nil")
	local deadline = computer.uptime() + (timeout or 0)
	repeat
		event.pull(deadline - computer.uptime())
	until computer.uptime() >= deadline
end


function loadfile(file, mode, env)
  local handle, reason = filesystem.open(file)
  if not handle then
    error(reason, 2)
  end
  local buffer = ""
  repeat
    local data, reason = filesystem.read(handle)
    if not data and reason then
      error(reason)
    end
    buffer = buffer .. (data or "")
  until not data
  filesystem.close(handle)
  if mode == nil then mode = "bt" end
  if env == nil then env = _G end
  return load(buffer, "=" .. file)
end

function dofile(file)
  local program, reason = loadfile(file)
  if program then
    local result = table.pack(pcall(program))
    if result[1] then
      return table.unpack(result, 2, result.n)
    else
      error(result[2])
    end
  else
    error(reason)
  end
end

event = event_code()
component_code()
text = text_code()
filesystem = fs_code()
fs = filesystem
keyboard = dofile("Keyboard.lua")
term = terminal_code()

network = dofile("network")
serialization = dofile("serialization")

event_code, component_code, text_code, fs_code, terminal_code = nil, nil, nil, nil, nil

-- bind GPU

if term.isAvailable() then
  component.gpu.bind(component.screen.address)
  component.gpu.setResolution(component.gpu.getResolution())
  component.gpu.setBackground(0x000000)
  component.gpu.setForeground(0xFFFFFF)
  term.setCursorBlink(true)
  term.clear()
end

network.portInit()
print()
print("GateController Started")

sendToLinkedCards = function(packet)
	local tunnels = component.list("tunnel", true) or {}
	for a,t in tunnels do
		local tc = component.proxy(a)
		tc.send(packet)
	end
end

Gate = component.getPrimary("stargate")

function sendOutgoingDialPacket()
	local packet = {Header = "GateDiallingOut", GateAddress = Gate.localAddress(), RemoteAddress = Gate.remoteAddress()}
	network.sendPacketWithoutLink(network.Ports.StargateResponse, packet, true)
end

function sendConnectedPacket(direction)
	local packet = {Header = "GateConnected", GateAddress = Gate.localAddress(), RemoteAddress = Gate.remoteAddress(), Direction = direction}
	network.sendPacketWithoutLink(network.Ports.StargateResponse, packet, true)
end

function sendIncomingDialPacket()
	local packet = {Header = "GateDiallingIn", GateAddress = Gate.localAddress(), RemoteAddress = Gate.remoteAddress()}
	network.sendPacketWithoutLink(network.Ports.StargateResponse, packet, true)
end

function sendClosingPacket()
	local packet = {Header = "GateClosing", GateAddress = Gate.localAddress()}
	network.sendPacketWithoutLink(network.Ports.StargateResponse, packet, true)
end



function networkListener(_, localNetworkCard, remoteAddress, port, distance, inpkt)
	if (not inpkt) then return end
	if (port ~= network.Ports.Stargate) and (port ~= network.Ports.General) then return end
	--print("Gate-related packet received "..port)
	local packet = serialization.unserialize(inpkt)
	if (not packet) then return end
	if (not packet.Header) then return end
	if (packet.Header == "dialGate") then
		if (not packet.DialAddress) then return end
		print("Dial packet received {"..packet.DialAddress.."}")
		Gate.dial(packet.DialAddress)
	elseif (packet.Header == "closeGate") then
		local state, engaged, direction = Gate.stargateState()
		if (state == "Dialling") or (state == "Connected") or (state == "Opening") then
			print("Terminate packet received")
			Gate.disconnect()
		end
	elseif (packet.Header == "sendGDO") then
		
	end
end

local lastGateEvent = ""
local lastGateState = ""

function gateEvent(tArgs)
	if (tArgs[1] == "sgDialIn") then
		sendIncomingDialPacket()
	elseif (tArgs[1] == "sgDialOut") then
		sendOutgoingDialPacket()
	elseif (tArgs[1] == "sgStargateStateChange") then
		local newState = tArgs[3]
		local oldState = tArgs[4]
		local _,_,direction = Gate.stargateState()
		if (lastGateState ~= newState) then
			if (newState == "Connected") then sendConnectedPacket(direction) return end
			if (newState == "Closing") or ((newState == "Offline") and (oldState == "Closing")) then sendClosingPacket() return end
		end
		lastGateState = newState
	elseif (tArgs[1] == "sgMessageReceived") then
		
	end
	lastGateEvent = tArgs[1]
end

while true do
	local tEvent = table.pack(event.pull())
	if (tEvent[1] == "modem_message") then
		networkListener(table.unpack(tEvent))
	else
		gateEvent(tEvent)
	end
end












