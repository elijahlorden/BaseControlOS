local Tablet = {}

Tablet.init = function()
	event.timer(10, Tablet.sendKeepalive, math.huge)
	network.registerNetworkListener(Tablet.gateNetworkListener)
	local fetchPkt = {Header = "FetchGateRegistry"}
	network.sendPacket(network.Ports.Stargate, fetchPkt, false)
end

Tablet.load = function(config)
	if (not config.GateRegistry) then config.GateRegistry = {} end
end

Tablet.registerCommands = function()
	Commands.registerCommand("dialGate", Tablet.dialGateCommand, "Broadcast DialOut packet for un-networked gates", "<dialAddress/savedAddressName>")
	Commands.registerCommand("closeGate", Tablet.closeGateCommand, "Broadcast Terminate packet for un-networked gates", "")
	Commands.registerCommand("registerGate", Tablet.registerGateCommand, "Register gate to server GateRegistry", "")
	Commands.registerCommand("unregisterGate", Tablet.unregisterGateCommand, "Unregister gate from server GateRegistry", "")
	Commands.registerCommand("listGates", Tablet.listGates, "List GateRegistry cache", "")
	Commands.registerCommand("fetchGateRegistry", Tablet.fetchGateRegistryCommand, "Manually fetch GateRegistry from Server", "")
end

Tablet.registerGateCommand = function(gateName, address)
	gateName = tostring(gateName) or ""
	address = tostring(address) or ""
	if (gateName == "") or (gateName == " ") or (address == "") or (address == " ") then return false end
	local outPkt = {Header = "RegisterGate", GateName = gateName, GateAddress = address}
	network.sendPacket(network.Ports.Stargate, outPkt, false)
	print("GateRegister packet sent")
	return true
end

Tablet.unregisterGateCommand = function(gateName)
	gateName = tostring(gateName) or ""
	if (gateName == "") or (gateName == " ") then return false end
	local outPkt = {Header = "UnregisterGate", GateName = gateName}
	network.sendPacket(network.Ports.Stargate, outPkt, false)
	print("GateUnregister packet sent")
	return true
end

Tablet.listGates = function()
	local num = 0
	local str = ""
	for i,p in pairs(Device.currentConfig.GateRegistry) do
		str = str..i.."  ("..p..")\n"
		num = num + 1
	end
	str = str..num.." Registered "
	if (num > 1) and (num ~= 0) then str=str.."Gates" else str=str.."Gate" end
	printPaged(str)
	return true
end

Tablet.fetchGateRegistryCommand = function()
	local outPkt = {Header = "FetchGateRegistry"}
	network.sendPacket(network.Ports.Stargate, outPkt, false)
	print("GateRegistryFetch packet sent")
	return true
end

Tablet.dialGateCommand = function(dialAddress)
	dialAddress = tostring(dialAddress)
	if (not dialAddress) or (dialAddress == "") or (dialAddress == " ") then return false end
	local sendAddress = dialAddress
	if (Device.currentConfig.GateRegistry[dialAddress] ~= nil) then
		print("Found GateRegistry entry for "..dialAddress.." {"..Device.currentConfig.GateRegistry[dialAddress].."}")
		sendAddress = Device.currentConfig.GateRegistry[dialAddress]
	end
	print("Sending DialOut packet...")
	local packet = {Header = "dialGate", DialAddress = sendAddress}
	network.sendPacketWithoutLink(network.Ports.Stargate, packet, true)
	return true
end

Tablet.closeGateCommand = function()
	local packet = {Header = "closeGate"}
	network.sendPacketWithoutLink(network.Ports.Stargate, packet, true)
	print("Sending Termination packet...")
	return true
end

local prevGatePacket = {Header = "", GateAddress = ""}

Tablet.gateNetworkListener = function(_, localNetworkCard, remoteAddress, port, distance, inpkt)
	if (not port) then return end
	if (port ~= network.Ports.StargateResponse) and (port ~= 0) then return end
	if (not inpkt) or (type(inpkt):lower() ~= "string") then return end
	local packet = serialization.unserialize(inpkt)
	if (not packet) then return end
	if (not packet.Header) then return end
	if (packet.Receiver) then
		if (packet.Receiver ~= Device.currentConfig.Name) and (packet.Receiver ~= "All") then return end
	end
	if (packet.Header == "GateDiallingOut") then
		if (not packet.GateAddress) then return end
		Shell.print("Gate "..(packet.GateAddress or "LOCAL_ADDRESS_ERROR").." initiated outgoing dialling sequence to "..(packet.RemoteAddress or "REMOTE_ADDRESS_ERROR"))
	elseif (packet.Header == "GateDiallingIn") then
		if (not packet.GateAddress) then return end
		Shell.print("Gate "..(packet.GateAddress or "LOCAL_ADDRESS_ERROR").." has received incoming dialling sequence from "..(packet.RemoteAddress or "REMOTE_ADDRESS_ERROR"))
	elseif (packet.Header == "GateClosing") then
		if (not packet.GateAddress) then return end
		Shell.print("Gate "..(packet.GateAddress or "LOCAL_ADDRESS_ERROR").."'s connection has terminated")
	elseif (packet.Header == "GateClosing") then
		if (not packet.GateAddress) then return end
		Shell.print("Gate "..(packet.GateAddress or "LOCAL_ADDRESS_ERROR").."'s connection has terminated")
	elseif (packet.Header == "GateConnected") then
		if (not packet.GateAddress) then return end
		if (prevGatePacket.Header == "GateConnected") and (prevGatePacket.GateAddress == packet.GateAddress) then return end
		if (packet.Direction == "Outgoing") then
			Shell.print("Gate "..(packet.GateAddress or "LOCAL_ADDRESS_ERROR").." has established a stable connection to "..(packet.RemoteAddress or "REMOTE_ADDRESS_ERROR"))
		else
			Shell.print("Gate "..(packet.GateAddress or "LOCAL_ADDRESS_ERROR").." has established a stable connection from "..(packet.RemoteAddress or "REMOTE_ADDRESS_ERROR"))
		end
	elseif (packet.Header == "GateRegistryBroadcast") or (packet.Header == "GateRegistryFetched") then
		print("regUpPkt")
		if (not packet.Registry) then return end
		Shell.print("Received GateRegistry update")
		Device.currentConfig.GateRegistry = packet.Registry
	end
	prevGatePacket = packet
end

Tablet.setup = function()
	
end

Tablet.sendKeepalive = function()
	network.sendKeepalivePacket()
end

Tablet.powerOff = function()
	
end
































return Tablet