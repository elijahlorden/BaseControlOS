Commands = {}

Commands.commandList = {}

Commands.registerCommand = function(name, func, helpDesc, helpArgs)
	local tbl = {}
	tbl.Name = name
	tbl.Function = func
	tbl.Description = helpDesc or ""
	tbl.ArgumentMessage = helpArgs or ""
	Commands.commandList[name] = tbl
end

Commands.executeCommand = function(name, isNetwork, ...)
	if (Commands.commandList[name] ~= nil) then
		local success, response = Commands.commandList[name].Function(...)
		if (not success) then
			local res = newResponse()
			print("[ ] = optional parameter;")
			res.print("[ ] = optional parameter;")
			print("Command usage: "..name.." "..Commands.commandList[name].ArgumentMessage)
			res.print("Command usage: "..name.." "..Commands.commandList[name].ArgumentMessage)
			return res
		else
			return response
		end
	else
		print("'"..tostring(name).."' is not a valid Command.  For a list of Commands, run 'help'")
		local res = newResponse()
		res.print("'"..tostring(name).."' is not a valid Command.  For a list of Commands, run 'help'")
		return res
	end
end










----------------------------------------------------------------- Internal Commands
local helpFunc = function(cmdName) -- HELP
	local response = newResponse()
	if (cmdName == nil) then
		local str = ""
		for i,p in pairs(Commands.commandList) do
			str = str..p.Name.."  ["..p.Description.."]\n"
		end
		printPaged(str)
		response.printPaged(str)
	else
		if (Commands.commandList[cmdName] ~= nil) then
			print("[ ] = optional parameter;")
			response.print("[ ] = optional parameter;")
			print("Usage: "..Commands.commandList[cmdName].Name.." "..Commands.commandList[cmdName].ArgumentMessage)
			response.print("Usage: "..Commands.commandList[cmdName].Name.." "..Commands.commandList[cmdName].ArgumentMessage)
		else
			print("'"..tostring(cmdName).."' is not a valid Command.  For a list of Commands, run 'help'")
			response.print("'"..tostring(cmdName).."' is not a valid Command.  For a list of Commands, run 'help'")
		end
	end
	return true, response
end

Commands.registerCommand("help", helpFunc, "Displays command list", "[command]")

local deviceNameFunc = function(newName) -- SET DEVICE NAME
	local response = newResponse()
	if (Device.currentConfig.Driver == "Server") then print("Unable to rename Central Server") response.print("Unable to rename Central Server") return true, response end
	local newName = tostring(newName)
	if (newName == nil) or (newName == "") or (newName == " ") then return false end
	if (newName:len() > 25) or (newName:len() < 5) then print("Name must 5 to 25 characters long") response.print("Name must 5 to 25 characters long") return true, response end
	Device.currentConfig.Name = newName
	print("Device name changed to '"..Device.currentConfig.Name.."'")
	response.print("Device name changed to '"..Device.currentConfig.Name.."'")
	Device.saveConfig()
	return true, response
end

Commands.registerCommand("setDeviceName", deviceNameFunc, "Sets name of local device", "name")

local deviceDriverFunc = function(newDriver) -- SET DEVICE DRIVER
	local response = newResponse()
	local newDriver = tostring(newDriver)
	if (newDriver == nil) or (newDriver == "") or (newDriver == " ") then return false end
	if (Device.driverList[newDriver] == nil) then print("Driver does not exist") response.print("Driver does not exist") end
	Device.currentConfig.Driver = newDriver
	print("Device driver changed to '"..Device.currentConfig.Driver.."'")
	print("A reboot will be required for the change to take effect")
	response.print("Device driver changed to '"..Device.currentConfig.Driver.."'")
	response.print("A reboot will be required for the change to take effect")
	Device.saveConfig()
	return true, response
end

Commands.registerCommand("setDeviceDriver", deviceDriverFunc, "Sets driver of local device", "driverName")

Commands.registerCommand("listDeviceDrivers", function() local res = newResponse() for i,p in pairs(Device.driverList) do print(i.." -- "..p.desc) res.print(i.." -- "..p.desc) end return true, res end, "List available device drivers", "")

Commands.registerCommand("memory", function() local res = newResponse() print(OS.memoryMsgStr()) res.print(OS.memoryMsgStr()) return true, res end, "Displays memory status", "")

Commands.registerCommand("energy", function() local res = newResponse() print(OS.powerMsgStr()) res.print(OS.powerMsgStr()) return true, res end, "Displays energy status", "")

Commands.registerCommand("shutdown", function() print("Shutting Downn") OS.sleep(1) network.sendShutdownPacket() Device.saveConfig() if (Device.Driver) then Device.Driver.powerOff() end computer.shutdown() return true end, "Soft poweroff", "")

local rebootCommand = function()
	if (Device.updatePackage ~= nil) then
		print("Update package present, installation process beginning")
		print("Do NOT power off the machine during the update process.")
		print("If the device is powered off during the update process, it will no longer function correctly.")
		print("Commencing update...")
		OS.sleep(1)
		Packager.installUpdatePackage(Device.updatePackage)
		print("Rebooting")
		OS.sleep(3)
		network.sendShutdownPacket()
		Device.saveConfig()
		if (Device.Driver) then Device.Driver.powerOff() end
		computer.shutdown(true)
	else
		print("Rebooting")
		OS.sleep(1)
		network.sendShutdownPacket()
		Device.saveConfig()
		if (Device.Driver) then Device.Driver.powerOff() end
		computer.shutdown(true)
	end
end

Commands.registerCommand("reboot", rebootCommand, "Soft reboot, will install update package if available", "")

Commands.registerCommand("cls", function() term.clear() return true end, "Clears the screen", "")

local listDrives = function() -- LIST DRIVES
	local response = newResponse()
	local driveIter = fs.drive.list()
	local num = 0
	for d in driveIter do
		num = num + 1
		local address = fs.drive.toAddress(d)
		local proxy = fs.drive.letterToProxy(d)
		if (proxy) then
			print((d or "Drive_Letter_Error").." "..("["..(proxy.getLabel() or "No Label").."]").." ("..(address or "Address_Error")..")")
			response.print((d or "Drive_Letter_Error").." "..("["..(proxy.getLabel() or "No Label").."]").." ("..(address or "Address_Error")..")")
		end
	end
	print(num.." Drives")
	return true, response
end

Commands.registerCommand("listDrives", listDrives, "List currently attached drives", "")

local installFunc = function(driveLetter) -- INSTALL TO DRIVE
	local response = newResponse()
	local driveLetter = tostring(driveLetter):sub(1,1):upper() or ""
	if (not driveLetter) or (driveLetter == "") or (driveLetter == " ") then return false end
	print("Attempting to install OS on drive "..driveLetter)
	response.print("Attempting to install OS on drive "..driveLetter)
	local success = Packager.installToDrive(driveLetter)
	if (success) then response.print("Installation successful") else response.print("Installation Failed") end
	return true, response
end

Commands.registerCommand("install", installFunc, "Install OS to the specified drive", "driveLetter")

local createInstallerFunc = function(driveLetter) -- CREATE INSTALLER FILES
	local response = newResponse()
	local driveLetter = tostring(driveLetter):sub(1,1):upper() or ""
	if (not driveLetter) or (driveLetter == "") or (driveLetter == " ") then return false end
	local proxy = fs.drive.letterToProxy(driveLetter)
	if (not proxy) then print("Drive does not exist") response.print("Drive does not exist") return true, response end
	print("creating installer files on drive "..driveLetter)
	response.print("creating installer files on drive "..driveLetter)
	local insProg, insData = Packager.assembleInstallFiles()
	Packager.writeFile(proxy, "/Installer", insProg)
	Packager.writeFile(proxy, "/InstallData", insData)
	return true, response
end

Commands.registerCommand("createInstallFiles", createInstallerFunc, "Create installer files", "driveLetter")

local installMiniappFunc = function(driveLetter, appName)
	if (not appName) or (appName == "") or (appName == " ") then return false end
	local response = newResponse()
	local driveLetter = tostring(driveLetter):sub(1,1):upper() or ""
	if (not driveLetter) or (driveLetter == "") or (driveLetter == " ") then return false end
	if (Device.miniAppList[appName] ~= nil) then
		local file = "/miniapps/"..Device.miniAppList[appName].file
		if (not filesystem.exists(file)) then print("App file not found") response.print("App file not found") return true, response end
		if (not Packager.installMiniAppToDrive(driveLetter, file)) then print("Installation Failed") response.print("Installation Failed") return true, response end
		print("Installed "..appName.." on drive "..driveLetter)
		response.print("Installed "..appName.." on drive "..driveLetter)
		local proxy = fs.drive.letterToProxy(driveLetter)
		if (proxy) then proxy.setLabel("ma:"..appName) end
	end
	return true, response
end

Commands.registerCommand("installMiniApp", installMiniappFunc, "Install a MiniApplication to the specified drive", "driveLetter, appName")

Commands.registerCommand("listMiniApps", function() local res = newResponse() for i,p in pairs(Device.miniAppList) do print(p.Name.." -- "..p.desc) res.print(i.." -- "..p.desc) end return true, res end, "List available device drivers", "")

local listComponentMethodsFunc = function(uuid) -- Print list of component methods
	local response = newResponse()
	local c = component.get(uuid)
	if (not c) then
		print("Component does not exist")
		response.print("Component does not exist")
		return true, response
	end
	local s = serialization.serialize(component.proxy(c), 10000)
	response.printPaged(s)
	printPaged(s)
	return true, response
end

Commands.registerCommand("listComponentMethods", listComponentMethodsFunc, "List methods for component", "UUID (can be partial)")




return Commands