local Packager = {}

Packager.devKey = "b135baaf9837ed1ec7bcb629eaf1adbc"
Packager.loggedUsr = "elijahlorden"
Packager.loggedPss = "elijah24680"

Packager.packageIntoTable = function()
	local tbl = {Directories = {}}
	print("Packaging OS...")
	Packager.processFolder("/", tbl)
	print("OS packaged")
	return tbl
end

Packager.processFolder = function(path, tbl)
	table.insert(tbl.Directories, path)
	local folderItems = {}
	local list = filesystem.list(path)
	for f in list do
		OS.sleep(0.05)
		if (filesystem.isDirectory(f)) and (not f:find("tmp")) then
			Packager.processFolder(path..f.."/", tbl)
		elseif (not filesystem.isDirectory(f)) then
			if (f ~= "config") then
				print("Packaging "..path..f)
				local str = Packager.getFileString(path..f)
				folderItems[path..f] = str
			end
		end
	end
	table.insert(tbl, folderItems)
end

Packager.getFileString = function(path, proxy)
	if (not proxy) then proxy = filesystem end
	local handle, reason = proxy.open(path)
	if (not handle) then
		print("Unable to read file "..path.."("..reason..")")
		return
	end
	local buffer = ""
	repeat
	local data, reason = proxy.read(handle)
	if (not data) and (reason) then
		print("Unable to read file "..path.."("..reason..")")
		return
    end
	buffer = buffer..(data or "")
	until not data
	proxy.close(handle)
	return buffer
end

Packager.joinList = function(list)
	local s = ""
	for _,p in pairs(list) do
		s = s..p
	end
	return s
end

Packager.request = function(address, args)
	if not component.isAvailable("internet") then
		print("No internet card, unable to send HTTP request")
		return
	end
	local internet = component.internet
	local result, request = pcall(internet.request, address, args)
	--print(result)
	if (result) then
		local buffer = ""
		repeat
			local data, reason = request.read()
			if (not data) and (reason) then error(reason) end
			buffer = buffer..(data or "")
		until not data
		request.close()
		if (string.match(buffer, "^Bad API request, ")) then
			print("HTTP Request Failed: "..buffer)
			return
		end
		return buffer
	else
		print("HTTP Request Failed")
	end
end

Packager.writeFile = function(proxy, path, str)
	local handle = proxy.open(path, "w")
	if (not handle) then print("Unable to create file "..path) end
	proxy.write(handle, str)
end

Packager.wipeDriveForOSInstall = function(proxy, path)
	for _,f in pairs(proxy.list(path)) do
		if (f ~= "config") then
			proxy.remove(path..f)
			print("Deleting "..f)
		end
	end
end

Packager.installToDrive = function(driveLetter)
	local proxy = fs.drive.letterToProxy(driveLetter)
	if (not proxy) then print("Drive does not exist") return false end
	print("Wiping drive "..driveLetter)
	Packager.wipeDriveForOSInstall(proxy, "/")
	local packagedOS = Packager.packageIntoTable()
	for i,p in pairs(packagedOS.Directories) do
		proxy.makeDirectory(p)
	end
	OS.sleep(0.5)
	for i,p in pairs(packagedOS) do
		if (i ~= "Directories") then
			for fn,f in pairs(p) do
				print("Installing "..fn)
				if (type(f):lower() == "string") then
					Packager.writeFile(proxy, fn, f)
					OS.sleep(0.1)
				end
			end
		end
	end
	return true
end

Packager.copyOSFileToDrive = function(driveProxy, filePath, newName)
	local inStr = Packager.getFileString(filePath)
	local handle = driveProxy.open("/"..newName, "w")
	driveProxy.write(handle, inStr)
	print("copied "..filePath.." to "..newName)
end

Packager.installMiniAppToDrive = function(drive, appFile)
	local proxy = fs.drive.letterToProxy(drive)
	if (not proxy) then print("Drive does not exist") return false end
	print("Wiping drive "..drive)
	Packager.wipeDriveForOSInstall(proxy, "/")
	print("Wiped")
	Packager.copyOSFileToDrive(proxy, "/init.lua", "/init.lua")
	Packager.copyOSFileToDrive(proxy, "/CoreLibs.lua", "/CoreLibs.lua")
	Packager.copyOSFileToDrive(proxy, "/Keyboard.lua", "/Keyboard.lua")
	Packager.copyOSFileToDrive(proxy, appFile, "/OS.lua")
	for f in filesystem.list("/Modules/") do
		Packager.copyOSFileToDrive(proxy, "/Modules/"..f, "/"..f)
	end
	return true
end

Packager.writeTmpFile = function(name, contents)
	local proxy = fs.proxy(computer.getBootAddress())
	Packager.writeFile(proxy, "/tmp/"..name, contents)
	return true
end

Packager.installUpdatePackage = function(packagePath)
	local proxy = fs.drive.letterToProxy("A")
	----- get package -----
	local inStr = Packager.getFileString(packagePath)
	if (not inStr) then print("Update failed") return false end
	local packagedOS = JSON.decode(inStr)
	if (not packagedOS) then print("Update failed") return false end
	print("Wiping drive")
	Packager.wipeDriveForOSInstall(proxy, "/")
	for i,p in pairs(packagedOS.Directories) do
		proxy.makeDirectory(p)
	end
	OS.sleep(0.5)
	for i,p in pairs(packagedOS) do
		if (i ~= "Directories") then
			for fn,f in pairs(p) do
				print("Installing "..fn)
				if (type(f):lower() == "string") then
					Packager.writeFile(proxy, fn, f)
					OS.sleep(0.1)
				end
			end
		end
	end
	return true
end






























return Packager