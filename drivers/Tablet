local Tablet = {}

Tablet.init = function()
	network.registerNetworkListener(Tablet.gateNetworkListener, {Enum.Port.StargateResponse}, {Enum.Header.Gate.GATEDIALLINGOUT, Enum.Header.Gate.GATEDIALLINGIN, Enum.Header.Gate.GATECLOSING, Enum.Header.Gate.GATECONNECTED})
	local fetchPkt = {Header = Enum.Header.FETCHGATEREGISTRY}
	network.sendPacket(Enum.Port.Stargate, fetchPkt, false)
	network.registerPingListener()
end

Tablet.load = function(config)
	if (not config.GateRegistry) then config.GateRegistry = {} end
	if (not config.PersonalGateRegistry) then config.PersonalGateRegistry = {} end
end

Tablet.registerCommands = function()
	Commands.registerCommand("dialGate", Tablet.dialGateCommand, "Broadcast DialOut packet for un-networked gates", "dialAddress/savedAddressName [-p]")
	Commands.registerCommand("closeGate", Tablet.closeGateCommand, "Broadcast Terminate packet for un-networked gates", "")
	Commands.registerCommand("registerGate", Tablet.registerGateCommand, "Register gate to server GateRegistry", "name, address, [-p]")
	Commands.registerCommand("unregisterGate", Tablet.unregisterGateCommand, "Unregister gate from server GateRegistry", "name, [-p]")
	Commands.registerCommand("listGates", Tablet.listGates, "List GateRegistry cache", "")
	Commands.registerCommand("listPersonalGates", Tablet.listPersonalGates, "List personal GateRegistry", "")
	Commands.registerCommand("fetchGateRegistry", Tablet.fetchGateRegistryCommand, "Manually fetch GateRegistry from Server", "")
end

Tablet.registerGateCommand = function(response, gateName, address, switch1)
	gateName = tostring(gateName) or ""
	address = tostring(address) or ""
	if (gateName == "") or (gateName == " ") or (address == "") or (address == " ") then return false end
	if (switch1 == "-p") then
		Device.currentConfig.PersonalGateRegistry[gateName] = address
		print("Personal GateRegistry updated")
	else
		local outPkt = {Header = Enum.Header.REGISTERGATE, GateName = gateName, GateAddress = address}
		network.sendPacket(Enum.Port.Stargate, outPkt, false)
		print("GateRegister packet sent")
	end
	Device.saveConfig()
	return true
end

Tablet.unregisterGateCommand = function(response, gateName, switch1)
	gateName = tostring(gateName) or ""
	if (gateName == "") or (gateName == " ") then return false end
	if (switch1 == "-p") then
		Device.currentConfig.PersonalGateRegistry[gateName] = nil
		print("Personal GateRegistry updated")
	else
		local outPkt = {Header = Enum.header.UNREGISTERGATE, GateName = gateName}
		network.sendPacket(Enum.Port.Stargate, outPkt, false)
		print("GateUnregister packet sent")
	end
	Device.saveConfig()
	return true
end

Tablet.listGates = function(response)
	local num = 0
	local str = ""
	for i,p in pairs(Device.currentConfig.GateRegistry) do
		str = str..i.."  ("..p..")\n"
		num = num + 1
	end
	str = str..num.." Registered "
	if (num > 1) and (num ~= 0) then str=str.."Gates" else str=str.."Gate" end
	printPaged(str)
	return true
end

Tablet.listPersonalGates = function(response)
	local num = 0
	local str = ""
	for i,p in pairs(Device.currentConfig.PersonalGateRegistry) do
		str = str..i.."  ("..p..")\n"
		num = num + 1
	end
	str = str..num.." Registered "
	if (num > 1) and (num ~= 0) then str=str.."Gates" else str=str.."Gate" end
	printPaged(str)
	return true
end

Tablet.fetchGateRegistryCommand = function(response)
	local outPkt = {Header = Enum.Header.FETCHGATEREGISTRY}
	network.sendPacket(Enum.Port.Stargate, outPkt, false)
	print("GateRegistryFetch packet sent")
	return true
end

Tablet.dialGateCommand = function(response, dialAddress, switch1)
	dialAddress = tostring(dialAddress)
	if (not dialAddress) or (dialAddress == "") or (dialAddress == " ") then return false end
	local sendAddress = dialAddress
	if (Device.currentConfig.GateRegistry[dialAddress] ~= nil) and (switch1 ~= "-p") then
		print("Found GateRegistry entry for "..dialAddress.." {"..Device.currentConfig.GateRegistry[dialAddress].."}")
		sendAddress = Device.currentConfig.GateRegistry[dialAddress]
	elseif (switch1 == "-p") and (Device.currentConfig.PersonalGateRegistry[dialAddress] ~= nil) then
		print("Found Personal GateRegistry entry for "..dialAddress.." {"..Device.currentConfig.GateRegistry[dialAddress].."}")
		sendAddress = Device.currentConfig.PersonalGateRegistry[dialAddress]
	end
	print("Sending DialOut packet...")
	local packet = {Header = Enum.Header.Gate.DIALGATE, DialAddress = sendAddress}
	network.sendPacketWithoutLink(Enum.Port.Stargate, packet, true)
	return true
end

Tablet.closeGateCommand = function(response)
	local packet = {Header = Enum.Header.Gate.CLOSEGATE}
	network.sendPacketWithoutLink(Enum.Port.Stargate, packet, true)
	print("Sending Termination packet...")
	return true
end

local prevGatePacket = {Header = "", GateAddress = ""}

Tablet.gateNetworkListener = function(_, localNetworkCard, remoteAddress, port, distance, inpkt)
	if (port ~= Enum.Port.StargateResponse) and (port ~= 0) then return end
	if (not inpkt) or (type(inpkt):lower() ~= "string") then return end
	local packet = serialization.unserialize(inpkt)
	if (not packet) then return end
	if (not packet.Header) then return end
	if (packet.Receiver) then
		if (packet.Receiver ~= Device.currentConfig.Name) and (packet.Receiver ~= "All") then return end
	end
	if (packet.Header == Enum.Header.Gate.GATEDIALLINGOUT) then
		if (not packet.GateAddress) then return end
		Shell.print("Gate "..(packet.GateAddress or "LOCAL_ADDRESS_ERROR").." initiated outgoing dialling sequence to "..(packet.RemoteAddress or "REMOTE_ADDRESS_ERROR"))
	elseif (packet.Header == Enum.Header.Gate.GATEDIALLINGIN) then
		if (not packet.GateAddress) then return end
		Shell.print("Gate "..(packet.GateAddress or "LOCAL_ADDRESS_ERROR").." has received incoming dialling sequence from "..(packet.RemoteAddress or "REMOTE_ADDRESS_ERROR"))
	elseif (packet.Header == Enum.Header.Gate.GATECLOSING) then
		if (not packet.GateAddress) then return end
		Shell.print("Gate "..(packet.GateAddress or "LOCAL_ADDRESS_ERROR").."'s connection has terminated")
	elseif (packet.Header == Enum.Header.Gate.GATECONNECTED) then
		if (not packet.GateAddress) then return end
		if (prevGatePacket.Header == Enum.Header.Gate.GATECLOSING) and (prevGatePacket.GateAddress == packet.GateAddress) then return end
		if (packet.Direction == "Outgoing") then
			Shell.print("Gate "..(packet.GateAddress or "LOCAL_ADDRESS_ERROR").." has established a stable connection to "..(packet.RemoteAddress or "REMOTE_ADDRESS_ERROR"))
		else
			Shell.print("Gate "..(packet.GateAddress or "LOCAL_ADDRESS_ERROR").." has established a stable connection from "..(packet.RemoteAddress or "REMOTE_ADDRESS_ERROR"))
		end
	elseif (packet.Header == "GateRegistryBroadcast") or (packet.Header == "GateRegistryFetched") then
		if (not packet.Registry) then return end
		Shell.print("Received GateRegistry update")
		Device.currentConfig.GateRegistry = packet.Registry
	end
	prevGatePacket = packet
end

Tablet.setup = function()

end

Tablet.powerOff = function()

end
































return Tablet
