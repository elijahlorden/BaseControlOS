local network = {}

network.acceptedServerName = "Server"

network.getModem = function()
	local modem = component.modem
	if (not modem) then print("No network card attached to device") end
	return modem or nil
end

network.sendToLinkedCards = function(packet)
	local tunnels = component.list("tunnel", true) or {}
	for a,t in tunnels do
		local tc = component.proxy(a)
		tc.send(packet)
	end
end

network.sendPacket = function(port, packet, wireless)
	local modem = network.getModem()
	if (not modem) then return false end
	if (modem.isWireless()) then if (wireless) then modem.setStrength(100000) else modem.setStrength(0) end end
	local packetStr = network.formatPacket(packet, port)
	network.sendToLinkedCards(packetStr)
	return modem.broadcast(port, packetStr)
end

network.sendPacketWithoutLink = function(port, packet, wireless)
	local modem = network.getModem()
	if (not modem) then return false end
	if (modem.isWireless()) then if (wireless) then modem.setStrength(100000) else modem.setStrength(0) end end
	local packetStr = network.formatPacket(packet, port)
	return modem.broadcast(port, packetStr)
end

network.getPortName = function(portNum)
	for i,p in pairs(Enum.Port) do
		if (p == portNum) then return i end
	end
end

network.formatPacket = function(inpkt, port)
	if (Device) then
		inpkt.SenderType = Device.currentConfig.Driver
		inpkt.Sender = Device.currentConfig.Name
	end
	if (not inpkt.Receiver) then inpkt.Receiver = "All" end
	inpkt.PortName = network.getPortName(port)
	local packetStr = serialization.serialize(inpkt)
	return packetStr
end

network.openPort = function(port)
	local modem = network.getModem()
	if (not modem) then return false end
	--print("Opening port "..port)
	return modem.open(port)
end

network.closePort = function(port)
	local modem = network.getModem()
	if (not modem) then return false end
	return modem.close(port)
end

network.registerNetworkListener = function(func, name)
	event.listen("WrappedNetworkSignal", func)
	if (name) then print("Registered NetworkListener "..name) end
end

network.sendKeepalivePacket = function()
	local packet = {Header = Enum.Header.KEEPALIVE, Receiver = network.acceptedServerName}
	network.sendPacket(Enum.Port.Keepalive, packet, false)
end

network.sendShutdownPacket = function()
	local packet = {Header = Enum.Header.SHUTDOWN}
	network.sendPacket(Enum.Port.Keepalive, packet, false)
end

network.ftp = {}
network.notifications = {}

network.maxPacketSize = 7000

network.ftp.sendPacket = function(fileName, receiver, chunk)
	local packet = {Header = Enum.Header.FILETRANSFERDATA, Receiver = receiver, FileName = fileName, Chunk = chunk}
	return network.sendPacket(Enum.Port.FTP, packet, false)
end

network.ftp.sendFinished = function(fileName, receiver, bytes)
	local packet = {Header = Enum.Header.FILETRANSFERCOMPLETE, Receiver = receiver, FileName = fileName, Bytes = bytes}
	return network.sendPacket(Enum.Port.FTP, packet, false)
end

network.ftp.readByesFromFile = function(driveProxy, handle, bytesToRead)
	local buffer = ""
	local cou = 0
	local maxCou = math.floor(bytesToRead/1024)-1
	repeat
		cou = cou + 1
		local data, reason = driveProxy.read(handle, 1024)--bytesToRead-(buffer:len()))
		if (not data) and (reason) then
			print("Unable to read file "..path.."("..reason..")")
			return
		end
		if (data) then
			buffer = buffer..data
		end
	until (not data) or (cou > maxCou)--(buffer:len() >= bytesToRead)
	if (buffer == "") or (buffer == " ") then return nil end
	return buffer
end

network.ftp.sendFile = function(driveProxy, path, sendName, receiverName)
	if (not driveProxy.exists(path)) or (driveProxy.isDirectory(path)) then return false end
	local ftpPktSize = network.maxPacketSize - 1000
	local handle, reason = driveProxy.open(path, "r")
	local fileSize = driveProxy.size(path)
	print(ftpPktSize.."b max chunk length")
	print(fileSize.."b File")
	if (not handle) then
		print("Unable to read file "..path.."("..reason..")")
		return
	end
	repeat
		local data = network.ftp.readByesFromFile(driveProxy, handle, ftpPktSize)
		if (data) then
			print("Sending "..data:len().."b Chunk")
			network.ftp.sendPacket(sendName, receiverName, data)
			OS.sleep(0.4)
		end
	until not data
	network.ftp.sendFinished(sendName, receiverName, fileSize)
	return true
end

network.ftp.listener = function(_, localNetworkCard, remoteAddress, port, distance, packet)
	if (port ~= 0) and (port ~= Enum.Port.FTP) and (port ~= Enum.Port.General) then return end
	if (packet.Header == Enum.Header.FILETRANSFERDATA) then
		if (not packet.FileName) or (not packet.Chunk) then return end
		Shell.print("Received "..packet.Chunk:len().."b for file "..packet.FileName)
		local tmpProxy = component.proxy(computer.getBootAddress())
		local handle, reason
		if (tmpProxy.exists("/tmp/"..packet.FileName.."_Partial")) then
			handle, reason = tmpProxy.open("/tmp/"..packet.FileName.."_Partial", "a")
		else
			handle, reason = tmpProxy.open("/tmp/"..packet.FileName.."_Partial", "w")
		end
		if (not handle) then Shell.print("Error opening file ("..reason..")") return end
		tmpProxy.write(handle, packet.Chunk)
		tmpProxy.close(file)
		OS.sleep(0.1)
	elseif (packet.Header == Enum.Header.FILETRANSFERCOMPLETE) then
		if (not packet.FileName) or (not packet.Bytes) then return end
		local tmpProxy = component.proxy(computer.getBootAddress())
		if (tmpProxy.exists("/tmp/"..packet.FileName.."_Partial")) then
			Shell.print("Received EOF for file "..packet.FileName)
			Shell.print("Checking ByteCount")
			if (tmpProxy.size("/tmp/"..packet.FileName.."_Partial") == packet.Bytes) then
				Shell.print("ByteCount matches, finalizing file transfer")
				tmpProxy.rename("/tmp/"..packet.FileName.."_Partial", "/tmp/"..packet.FileName)
				computer.pushSignal("ftp_file_received", packet.FileName, "/tmp/"..packet.FileName)
			else
				Shell.print("ByteCount mismath, aborting file transfer")
				tmpProxy.remove("/tmp/"..packet.FileName.."_Partial")
			end
		end
	end
end

network.ftp.registerFtpListener = function(func)
	event.listen("ftp_file_received", func)
end

network.notifications.broadcast = function(message)
	local packet = {Header = Enum.Header.NOTIFICATION, Message = message}
	network.sendPacket(Enum.Port.Notifications, packet, false)
end

network.notifications.listener = function(_, localNetworkCard, remoteAddress, port, distance, packet)
	if (port ~= 0) and (port ~= Enum.Port.Notifications) and (port ~= Enum.Port.General) then return end
	if (not packet) then return end
	if (packet.Header ~= Enum.Header.NOTIFICATION) then return end
	if (not packet.Message) then return end
	computer.beep(2000)
	Shell.print(packet.Message)
	computer.beep(2000)
end

network.pingListener = function(_, localNetworkCard, remoteAddress, port, distance, packet)
	if (port ~= 0) and (port ~= Enum.Port.Keepalive) and (port ~= Enum.Port.General) then return end
	if (packet.Header ~= Enum.Header.SERVERPING) then return end
	--Shell.print("Responding to Server Ping")
	network.sendKeepalivePacket()
end

network.registerPingListener = function()
	network.registerNetworkListener(network.pingListener, "PingListener")
end

network.wrappedNetworkSignalGenerator = function(_, localNetworkCard, remoteAddress, port, distance, inpkt)
	if (not port) then return end
	if (not inpkt) or (type(inpkt) ~= "string") then return end
	local packet = serialization.unserialize(inpkt)
	if (not packet) then return end
	if (not packet.Header) or (not packet.Sender) or (not packet.Receiver) then return end
	if (packet.Receiver ~= Device.currentConfig.Name) and (packet.Receiver ~= "All") then return end
	--print(inpkt)
	computer.pushSignal("WrappedNetworkSignal", localNetworkCard, remoteAddress, port, distance, packet)
end


network.init = function()
	event.listen("modem_message", network.wrappedNetworkSignalGenerator)
	network.registerNetworkListener(network.ftp.listener)
	network.registerNetworkListener(network.notifications.listener)
	network.portInit()
end

network.portInit = function()
	for i,p in pairs(Enum.Port) do
		local success = network.openPort(p)
		if (success) then
			print("Opened "..i.." Port ("..p..")")
		else
			print("Unable to open "..i.." Port ("..p..")")
		end
	end
end































return network
