local network = {}

network.receivePort = 3209

network.acceptedServerName = "Server"

network.getModem = function()
	local modem = component.modem
	if (not modem) then print("No network card attached to device") end
	return modem or nil
end

network.sendToLinkedCards = function(packet)
	local tunnels = component.list("tunnel", true) or {}
	for a,t in tunnels do
		local tc = component.proxy(a)
		tc.send(packet)
	end
end

network.sendPacket = function(port, packet, wireless)
	local modem = network.getModem()
	if (not modem) then return false end
	if (modem.isWireless()) then if (wireless) then modem.setStrength(100000) else modem.setStrength(0) end end
	packet.SenderType = Device.currentConfig.Driver
	packet.Sender = Device.currentConfig.Name
	local packetStr = serialization.serialize(packet)
	network.sendToLinkedCards(packetStr)
	return modem.broadcast(port, packetStr)
end

network.openPort = function(port)
	local modem = network.getModem()
	if (not modem) then return false end
	print("Opening port "..port)
	return modem.open(port)
end

network.closePort = function(port)
	local modem = network.getModem()
	if (not modem) then return false end
	return modem.close(port)
end

network.registerNetworkListener = function(func)
	event.listen("modem_message", func)
end

network.sendKeepalivePacket = function()
	local packet = {Header = "Keepalive"}
	network.sendPacket(network.receivePort, packet, false)
end

network.sendShutdownPacket = function()
	local packet = {Header = "Shutdown"}
	network.sendPacket(network.receivePort, packet, false)
end




network.init = function()
	network.openPort(network.receivePort)
end

































return network